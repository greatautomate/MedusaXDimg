"""
MedusaXD Image Generator Bot - Hydrogram Version
A comprehensive Telegram bot for AI image generation with admin controls and logging.
"""

import asyncio
import logging
from datetime import datetime
from hydrogram import Client, filters
from hydrogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import Config
from database import Database
from infip_provider import MedusaXDImageGenerator

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MedusaXDBot:
    def __init__(self):
        self.config = Config()
        self.db = Database(self.config.MONGODB_URL)
        self.image_generator = MedusaXDImageGenerator()

        # Initialize Hydrogram client
        self.app = Client(
            "medusaxd_bot",
            bot_token=self.config.BOT_TOKEN,
            api_id=self.config.API_ID,
            api_hash=self.config.API_HASH
        )

    async def initialize(self):
        """Initialize the bot and database"""
        try:
            await self.db.connect()
            logger.info("Database connected successfully")

            # Add default admin if not exists
            if self.config.ADMIN_IDS:
                for admin_id in self.config.ADMIN_IDS:
                    await self.db.add_admin(admin_id)
                    await self.db.add_authorized_user(admin_id)

            logger.info("Bot initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize bot: {e}")
            raise

    async def start_command(self, client: Client, message: Message):
        """Handle /start command"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"

        # Check permissions
        if not await self._check_user_permissions(message, user_id, username):
            return

        welcome_message = (
            "üé® **Welcome to MedusaXD Image Generator Bot!**\n\n"
            "Generate stunning AI images with simple text prompts!\n\n"
            "**Available Commands:**\n"
            "üñºÔ∏è `/generate <prompt>` - Generate an image\n"
            "üìä `/models` - View available AI models\n"
            "‚ÑπÔ∏è `/help` - Get detailed help\n"
            "üë§ `/profile` - View your profile\n\n"
            "**Example:**\n"
            "`/generate A majestic dragon flying over a crystal castle at sunset`\n\n"
            "‚ú® *Let your imagination run wild!*"
        )

        await message.reply_text(welcome_message)

    async def generate_command(self, client: Client, message: Message):
        """Handle /generate command"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"

        # Check permissions
        if not await self._check_user_permissions(message, user_id, username):
            return

        # Get prompt
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            await message.reply_text(
                "‚ùå **No prompt provided**\n\n"
                "**Usage:** `/generate Your amazing prompt here`\n\n"
                "**Example:** `/generate A beautiful sunset over mountains`"
            )
            return

        prompt = command_parts[1]

        # Check rate limit
        if not await self.db.check_rate_limit(user_id, self.config.RATE_LIMIT_MINUTES, self.config.MAX_REQUESTS_PER_PERIOD):
            await message.reply_text(
                f"‚è≥ **Rate limit exceeded**\n\n"
                f"You can make {self.config.MAX_REQUESTS_PER_PERIOD} requests every {self.config.RATE_LIMIT_MINUTES} minutes.\n"
                "Please wait before making another request."
            )
            return

        # Record request for rate limiting
        await self.db.record_request(user_id)

        # Send processing message
        processing_msg = await message.reply_text(
            f"üé® **Generating image...**\n\n"
            f"**Prompt:** {prompt}\n\n"
            "‚è≥ *This may take a few moments...*"
        )

        try:
            # Generate image
            response = await self.image_generator.generate_images(
                prompt=prompt,
                model="img3",
                num_images=1,
                aspect_ratio="landscape"
            )

            # Delete processing message
            await processing_msg.delete()

            # Send generated image
            image_url = response.data[0].url
            caption = (
                f"üé® **MedusaXD Generated Image**\n\n"
                f"**Prompt:** {prompt}\n"
                f"**Generated by:** @{username} (`{user_id}`)"
            )

            await message.reply_photo(photo=image_url, caption=caption)

            # Update statistics and log
            await self.db.increment_user_generations(user_id)
            await self.db.log_generation(user_id, username, prompt, "img3", [image_url], True)

        except Exception as e:
            logger.error(f"Image generation failed: {e}")
            await processing_msg.edit_text(
                f"‚ùå **Image generation failed**\n\n"
                f"**Error:** {str(e)}\n\n"
                "Please try again with a different prompt."
            )

    async def help_command(self, client: Client, message: Message):
        """Handle /help command"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"

        if not await self._check_user_permissions(message, user_id, username):
            return

        help_text = (
            "üé® **MedusaXD Image Generator Bot - Help**\n\n"

            "**üñºÔ∏è Image Generation Commands:**\n"
            "‚Ä¢ `/generate <prompt>` - Generate an image from text\n"
            "‚Ä¢ `/models` - View available AI models\n\n"

            "**üìä User Commands:**\n"
            "‚Ä¢ `/profile` - View your profile and stats\n"
            "‚Ä¢ `/help` - Show this help message\n\n"

            "**üéØ Generation Examples:**\n"
            "‚Ä¢ `/generate A majestic dragon flying over mountains`\n"
            "‚Ä¢ `/generate A cyberpunk city at night, neon lights`\n"
            "‚Ä¢ `/generate Portrait of a wise wizard, fantasy art`\n\n"

            "**Available Models:**\n"
            "‚Ä¢ `img3` - High-quality general images\n"
            "‚Ä¢ `img4` - Enhanced detail and realism\n"
            "‚Ä¢ `uncen` - Uncensored generation\n\n"

            f"**‚è±Ô∏è Rate Limits:**\n"
            f"‚Ä¢ Max {self.config.MAX_REQUESTS_PER_PERIOD} requests per {self.config.RATE_LIMIT_MINUTES} minutes\n\n"

            "‚ú® *Unleash your creativity with MedusaXD!*"
        )

        await message.reply_text(help_text)

    async def models_command(self, client: Client, message: Message):
        """Handle /models command"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"

        if not await self._check_user_permissions(message, user_id, username):
            return

        models_text = (
            "ü§ñ **Available AI Models**\n\n"

            "**üé® img3** - *Standard Quality*\n"
            "‚Ä¢ High-quality general image generation\n"
            "‚Ä¢ Fast processing time\n"
            "‚Ä¢ Good for most use cases\n\n"

            "**‚ú® img4** - *Enhanced Quality*\n"
            "‚Ä¢ Superior detail and realism\n"
            "‚Ä¢ Advanced AI algorithms\n"
            "‚Ä¢ Best for professional results\n\n"

            "**üî• uncen** - *Uncensored*\n"
            "‚Ä¢ No content restrictions\n"
            "‚Ä¢ Creative freedom\n"
            "‚Ä¢ Use responsibly\n\n"

            f"**Default Model:** `{self.config.DEFAULT_MODEL}`\n\n"

            "**How to use:**\n"
            "‚Ä¢ `/generate Your amazing prompt`\n\n"

            "**üí° Pro Tip:** All models produce high quality results!"
        )

        await message.reply_text(models_text)

    async def profile_command(self, client: Client, message: Message):
        """Handle /profile command"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"

        if not await self._check_user_permissions(message, user_id, username):
            return

        # Get user data
        users = await self.db.get_authorized_users()
        user_data = next((u for u in users if u['user_id'] == user_id), None)

        if not user_data:
            await message.reply_text("‚ùå **Profile not found**")
            return

        # Check rate limit status
        can_generate = await self.db.check_rate_limit(
            user_id, 
            self.config.RATE_LIMIT_MINUTES, 
            self.config.MAX_REQUESTS_PER_PERIOD
        )

        profile_text = (
            f"üë§ **Profile: {username}**\n\n"

            f"**üìä Statistics:**\n"
            f"‚Ä¢ User ID: `{user_id}`\n"
            f"‚Ä¢ Total Generations: `{user_data.get('total_generations', 0)}`\n"
            f"‚Ä¢ Member Since: `{user_data.get('authorized_at', 'Unknown').strftime('%Y-%m-%d') if user_data.get('authorized_at') else 'Unknown'}`\n\n"

            f"**‚ö° Rate Limit Status:**\n"
            f"‚Ä¢ Status: {'‚úÖ Available' if can_generate else '‚è≥ Limited'}\n"
            f"‚Ä¢ Limit: {self.config.MAX_REQUESTS_PER_PERIOD} requests per {self.config.RATE_LIMIT_MINUTES} minutes\n\n"

            "**üé® Ready to create amazing images!**"
        )

        await message.reply_text(profile_text)

    async def admin_command(self, client: Client, message: Message):
        """Handle /admin command"""
        user_id = message.from_user.id

        if not await self.db.is_admin(user_id):
            await message.reply_text("‚ùå **Access Denied** - Admin only command.")
            return

        # Get statistics
        stats = await self.db.get_stats()
        bot_status = await self.db.get_bot_status()

        admin_text = (
            "üîß **MedusaXD Admin Panel**\n\n"

            f"**üìä Bot Statistics:**\n"
            f"‚Ä¢ Status: {'‚úÖ Enabled' if bot_status.get('enabled', True) else 'üî¥ Disabled'}\n"
            f"‚Ä¢ Total Users: `{stats.get('total_users', 0)}`\n"
            f"‚Ä¢ Banned Users: `{stats.get('total_banned', 0)}`\n"
            f"‚Ä¢ Total Generations: `{stats.get('total_generations', 0)}`\n"
            f"‚Ä¢ Recent (24h): `{stats.get('recent_generations_24h', 0)}`\n\n"

            "**Available Admin Commands:**\n"
            "‚Ä¢ `/adduser <user_id>` - Add user\n"
            "‚Ä¢ `/removeuser <user_id>` - Remove user\n"
            "‚Ä¢ `/ban <user_id> [reason]` - Ban user\n"
            "‚Ä¢ `/unban <user_id>` - Unban user\n"
            "‚Ä¢ `/broadcast <message>` - Broadcast message\n"
            "‚Ä¢ `/stats` - Detailed statistics"
        )

        await message.reply_text(admin_text)

    async def _check_user_permissions(self, message: Message, user_id: int, username: str) -> bool:
        """Check if user has permissions"""
        # Check if bot is enabled
        bot_status = await self.db.get_bot_status()
        if not bot_status.get('enabled', True):
            await message.reply_text("üö´ **MedusaXD Bot is currently disabled.**")
            return False

        # Check if user is authorized
        if not await self.db.is_user_authorized(user_id):
            await message.reply_text(
                "üîí **Access Denied**\n\n"
                "You are not authorized to use MedusaXD Image Generator Bot.\n"
                "Please contact an administrator for access."
            )
            return False

        # Check if user is banned
        if await self.db.is_user_banned(user_id):
            ban_info = await self.db.get_ban_info(user_id)
            await message.reply_text(
                f"üö´ **You are banned from using this bot**\n\n"
                f"**Reason:** {ban_info.get('reason', 'No reason provided')}"
            )
            return False

        # Update user activity
        await self.db.update_user_activity(user_id, username)
        return True

    def setup_handlers(self):
        """Setup all command handlers"""
        # Register handlers using decorators
        @self.app.on_message(filters.command("start"))
        async def start_handler(client, message):
            await self.start_command(client, message)

        @self.app.on_message(filters.command("generate"))
        async def generate_handler(client, message):
            await self.generate_command(client, message)

        @self.app.on_message(filters.command("help"))
        async def help_handler(client, message):
            await self.help_command(client, message)

        @self.app.on_message(filters.command("models"))
        async def models_handler(client, message):
            await self.models_command(client, message)

        @self.app.on_message(filters.command("profile"))
        async def profile_handler(client, message):
            await self.profile_command(client, message)

        @self.app.on_message(filters.command("admin"))
        async def admin_handler(client, message):
            await self.admin_command(client, message)

    async def run(self):
        """Run the bot"""
        try:
            await self.initialize()
            self.setup_handlers()

            logger.info("üöÄ MedusaXD Bot starting...")

            async with self.app:
                logger.info("‚úÖ Bot is running!")
                await asyncio.Event().wait()

        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            raise

async def main():
    """Main entry point"""
    bot = MedusaXDBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
